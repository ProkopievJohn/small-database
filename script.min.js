if (typeof HTMLElement != "undefined" && !HTMLElement.prototype.insertAdjacentElement) {
  HTMLElement.prototype.insertAdjacentElement = function(where, parsedNode) {
    switch (where) {
      case 'beforeBegin':
        this.parentNode.insertBefore(parsedNode, this)
        break;
      case 'afterBegin':
        this.insertBefore(parsedNode, this.firstChild);
        break;
      case 'beforeEnd':
        this.appendChild(parsedNode);
        break;
      case 'afterEnd':
        if (this.nextSibling) this.parentNode.insertBefore(parsedNode, this.nextSibling);
        else this.parentNode.appendChild(parsedNode);
        break;
    }
  }

  HTMLElement.prototype.insertAdjacentHTML = function(where, htmlStr) {
    var r = this.ownerDocument.createRange();
    r.setStartBefore(this);
    var parsedHTML = r.createContextualFragment(htmlStr);
    this.insertAdjacentElement(where, parsedHTML)
  }


  HTMLElement.prototype.insertAdjacentText = function(where, txtStr) {
    var parsedText = document.createTextNode(txtStr)
    this.insertAdjacentElement(where, parsedText)
  }
}
function EventEmitter() {
	this.events = {};
}

EventEmitter.prototype.on = function(event, listener) {
	if (typeof this.events[event] !== 'object') {
		this.events[event] = [];
	}
	this.events[event].push(listener);
};

EventEmitter.prototype.emit = function (event) {
	if (typeof this.events[event] !== 'object') return;
	var args = [].slice.call(arguments, 1),
		listeners = this.events[event].slice(),
		length = listeners.length;
	for(var i = 0; i < length; i++) {
		listeners[i].apply(this, args)
	}
};

EventEmitter.prototype.removeListener = function (event, listener) {
	if (typeof this.events[event] !== 'object') return;
	var id = this.events[event].indexOf(listener);
	if (id !== -1) {
		this.events[event].splice(id, 1);
	}
};

function Helper() {}


Helper.prototype.XMLLoad = function (method, url, callback) {
	'use strict';
	var xml = new XMLHttpRequest();
	xml.addEventListener('readystatechange', function () {
		if (xml.readyState == 4 && xml.status == 200) {
			callback(xml.responseText);
		}
	});
	xml.open(method, url, true);
	xml.send();
};

Helper.prototype.helperSearchInArray = function (obj, key, callback, self) {
	for (var i in obj) {
		if (i == key) {
			callback(obj[i], self);
		} else if (typeof obj[i] == "object" && Object.keys(obj[i]).length > 0) {
			self.helperSearchInArray(obj[i], key, callback, self);
		}
	}
};
function App() {
	this.database = new Database();
	this.url = 'https://raw.githubusercontent.com/David-Haim/CountriesToCitiesJSON/master/countriesToCities.json';
	this.database = new Database();
	this.countries = new Countries(document.querySelector('#countries'));
	this.cities = new Cities(document.querySelector('#cities'));
	this.init();
}

App.prototype = Object.create(Helper.prototype);

App.prototype.init = function () {
	this.database.on('data-add', this.dataAddDo.bind(this));
	this.XMLLoad('GET', this.url, this.addDataToBase.bind(this));
	
	// var data = {
	// 	id: 'usa',
	// 	citiessss: [
	// 		{1:'newyourk'},
	// 		{2:'sietle'},
	// 		{3:'losqangeles',cities: 'coties'}
	// 	]
	// }

	// this.database.dataAdd(data);
};

App.prototype.addDataToBase = function (data) {
	var data = JSON.parse(data);
	for (var i in data) {
		if (i !== '') {
			if (i === 'Norway' || i === 'Denmark') {
			this.database.dataAdd({id: i, cities: data[i]})
			}
		}
	}
};

App.prototype.dataAddDo = function (data) {
	this.countries.addCountry(data.id);
	var arrCities = this.database.dataFindProps('cities');
	this.cities.clearAllList();
	var merged = [].concat.apply([], arrCities);
	for (var i = 0; i < merged.length; i++) {
		this.cities.addCity(merged[i]);
	}
};

window.addEventListener('DOMContentLoaded', function(){
	new App();
});


if (!Array.prototype.findIndex) {
	Array.prototype.findIndex = function(predicate) {
		if (this == null) {
			throw new TypeError('Array.prototype.findIndex called on null or undefined');
		}
		if (typeof predicate !== 'function') {
			throw new TypeError('predicate must be a function');
		}
		var list = Object(this);
		var length = list.length >>> 0;
		var thisArg = arguments[1];
		var value;

		for (var i = 0; i < length; i++) {
			value = list[i];
			if (predicate.call(thisArg, value, i, list)) {
				return i;
			}
		}
		return -1;
	};
};

if (!Array.prototype.find) {
	Array.prototype.find = function(predicate) {
		if (this == null) {
			throw new TypeError('Array.prototype.find called on null or undefined');
		}
		if (typeof predicate !== 'function') {
			throw new TypeError('predicate must be a function');
		}
		var list = Object(this);
		var length = list.length >>> 0;
		var thisArg = arguments[1];
		var value;

		for (var i = 0; i < length; i++) {
			value = list[i];
			if (predicate.call(thisArg, value, i, list)) {
				return value;
			}
		}
		return undefined;
	};
};

function Database() {
	this.items = [];
	this.dataMap = {};
	this.myId = 'id';
	this.events = new EventEmitter();
}

Database.prototype = Object.create(App.prototype)

Database.prototype.dataAdd = function (item) {
	var id = this.dataGetItemId(item);
	if (this.dataMap[id]) {
		throw new Error('Item with ' + this.myId + ': ' + id + ' - already exists');
	}
	this.items.push(item);
	this.dataMap[id] = item;
	this.emit('data-add', item);
};

Database.prototype.dataRemove = function (item) {
	var id = this.dataGetItemId(item),
		idArr = this.dataFindIndexInArray(this.items, item);
	if (this.dataMap[id]) {
		this.emit('data-del', this.dataMap[id]);
		delete this.dataMap[id];
		this.items.splice(idArr, 1);
	} else {
		throw new Error('Item you trying to delete does not belong to this store');
	}
};

Database.prototype.dataGetItemId = function (item) {
	if (typeof item === 'object' && item[this.myId] !== undefined) {
		return item[this.myId];
	} else if (typeof item === 'string' || typeof item === 'number') {
		return item.toString();
	} else {
		throw new Error('Item must have "' + this.myId + '" attribute');
	}
};

Database.prototype.dataFindIndexInArray = function (items, item) {
	function helper(item) {
		return function (el, i, arr) {
			return el === item;
		}
	}
	return items.findIndex(helper(item));
};

Database.prototype.dataUpdate = function (item, name, val) {
	var id = this.dataGetItemId(item);
	if (!name || !val) throw new Error('Uppdate mast have name or/and value of property');
	this.dataMap[id][name] = val;
	this.emit('data-update', this.dataMap[id]);
};

Database.prototype.dataFindProps = function (prop) {
	if (typeof prop !== 'string') return;
	var result = [];
	function helper (value) {
		result.push(value);
		return result;
	}
	this.helperSearchInArray(this.items, prop, helper, this);
	return result;
};


Database.prototype.emit = function (event, parameters) {
	this.events.emit(event, parameters);
};

Database.prototype.on = function (event, listener) {
	this.events.on(event, listener);
};

function Countries(el) {
	if (!el) return;
	this.el = el;
	this.elToAdd = this.el.querySelector('#countries-list');
	this.elForAdd = this.el.querySelector('#country-input');
	this.init();
}

Countries.prototype = {
	init: function () {
		this.el.addEventListener('click', this.delegationClick.bind(this));
		this.el.addEventListener('keyup', this.delegationKeyup.bind(this));
	},

	delegationClick: function (e) {
		var target = e.target;
	},

	delegationKeyup: function (e) {
		var target = e.target;

		console.log(e.keyCode);
		this.findInList(this.elForAdd.value);
	},

	addCountry: function (text) {
		if (typeof text !== 'string') return;
		this.elToAdd.insertAdjacentHTML('beforeend', '<li>' + text + '</li>');
	},

	clearAllList: function () {
		var els = this.elToAdd.children;
		for (var i = 0; i < els.length; i++) {
			els[i].parentNode.removeChild(els[i]);
		}
	},

	findInList: function (text) {
		var els = this.elToAdd.children;
		for (var i = 0; i < els.length; i++) {
			els[i].classList.add('hide');
			if (els[i].innerHTML.toLowerCase().indexOf(text) !== -1) {
				els[i].classList.remove('hide');
				els[i].classList.add('show-list');
			}
		}
	}
}

function Cities(el) {
	if (!el) return;
	this.el = el;
	this.elToAdd = this.el.querySelector('#cities-list');
	this.elForAdd = this.el.querySelector('#cities-input');
	this.init();
}

Cities.prototype = {
	init: function () {
		this.el.addEventListener('click', this.delegationClick.bind(this));
		this.el.addEventListener('keyup', this.delegationKeyup.bind(this));
	},

	delegationClick: function (e) {
		var target = e.target;
	},

	delegationKeyup: function (e) {
		var target = e.target;

		this.findInList(this.elForAdd.value);
	},

	addCity: function (text) {
		if (typeof text !== 'string') return;
		this.elToAdd.insertAdjacentHTML('beforeend', '<li>' + text + '</li>');
	},

	clearAllList: function () {
		var els = this.elToAdd.children;
		for (var i = 0; i < els.length; i++) {
			els[i].parentNode.removeChild(els[i]);
		}
	},

	findInList: function (text) {
		var els = this.elToAdd.children;
		for (var i = 0; i < els.length; i++) {
			els[i].classList.add('hide');
			if (els[i].innerHTML.toLowerCase().indexOf(text) !== -1) {
				els[i].classList.remove('hide');
				els[i].classList.add('show-list');
			}
		}
	}
}
