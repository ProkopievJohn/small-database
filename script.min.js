if (typeof HTMLElement != "undefined" && !HTMLElement.prototype.insertAdjacentElement) {
  HTMLElement.prototype.insertAdjacentElement = function(where, parsedNode) {
    switch (where) {
      case 'beforeBegin':
        this.parentNode.insertBefore(parsedNode, this)
        break;
      case 'afterBegin':
        this.insertBefore(parsedNode, this.firstChild);
        break;
      case 'beforeEnd':
        this.appendChild(parsedNode);
        break;
      case 'afterEnd':
        if (this.nextSibling) this.parentNode.insertBefore(parsedNode, this.nextSibling);
        else this.parentNode.appendChild(parsedNode);
        break;
    }
  }

  HTMLElement.prototype.insertAdjacentHTML = function(where, htmlStr) {
    var r = this.ownerDocument.createRange();
    r.setStartBefore(this);
    var parsedHTML = r.createContextualFragment(htmlStr);
    this.insertAdjacentElement(where, parsedHTML)
  }


  HTMLElement.prototype.insertAdjacentText = function(where, txtStr) {
    var parsedText = document.createTextNode(txtStr)
    this.insertAdjacentElement(where, parsedText)
  }
}
function EventEmitter() {
	this.events = {};
}

EventEmitter.prototype.on = function(event, listener) {
	if (typeof this.events[event] !== 'object') {
		this.events[event] = [];
	}
	this.events[event].push(listener);
};

EventEmitter.prototype.emit = function (event) {
	if (typeof this.events[event] !== 'object') return;
	var args = [].slice.call(arguments, 1),
		listeners = this.events[event].slice(),
		length = listeners.length;
	for(var i = 0; i < length; i++) {
		listeners[i].apply(this, args)
	}
};

EventEmitter.prototype.removeListener = function (event, listener) {
	if (typeof this.events[event] !== 'object') return;
	var id = this.events[event].indexOf(listener);
	if (id !== -1) {
		this.events[event].splice(id, 1);
	}
};

function Helper() {}


Helper.prototype.XMLLoad = function (method, url, callback) {
	'use strict';
	var xml = new XMLHttpRequest();
	xml.addEventListener('readystatechange', function () {
		if (xml.readyState == 4 && xml.status == 200) {
			callback(xml.responseText);
		}
	});
	xml.open(method, url, true);
	xml.send();
};

function App() {
	this.database = new Database();
	this.url = 'https://raw.githubusercontent.com/David-Haim/CountriesToCitiesJSON/master/countriesToCities.json';
	this.countries = new Countries(document.querySelector('#countries'));
	this.cities = new Cities(document.querySelector('#cities'));
	this.init();
}

App.prototype = Object.create(Helper.prototype);

App.prototype.init = function () {
	window.d = this.database;
	this.database.on('data-add', this.dataAddDo.bind(this));
	this.countries.on('choose-countries', this.chooseCountries.bind(this));
	this.countries.on('country-enter', this.countryEnter.bind(this));
	this.cities.on('city-enter', this.citiesEnter.bind(this));
	this.XMLLoad('GET', this.url, this.addDataToBase.bind(this));
};

App.prototype.addDataToBase = function (data) {
	var data = JSON.parse(data);
	for (var i in data) {
		if (i !== '') {
			if (i === 'Norway' || i === 'Denmark' || i === 'Bermuda') {
				this.database.dataAdd({id: i, cities: data[i]})
			}
		}
	}
};

App.prototype.dataAddDo = function (data) {
	this.countries.addCountry(data.id);
	var merged = this.database.items[this.database.items.length - 1].cities;
	if (!merged) return;
	for (var i = 0; i < merged.length; i++) {
		this.cities.addCity(merged[i], data.id);
	}
};

App.prototype.chooseCountries = function (data) {
	var response = [];
	for (var i = 0; i < data.length; i++) {
		response.push(data[i].innerHTML)
	}
	this.cities.chooseInList(response);
};

App.prototype.countryEnter = function (data) {
	this.cities.startChooseCities(data.innerHTML);
};

App.prototype.citiesEnter = function (data) {
	this.countries.enterCountry(this.countries.getByHtml(data.getAttribute('country-name')));
	alert('Country: ' + data.getAttribute('country-name') + '; City: ' + data.innerHTML)
};

window.addEventListener('DOMContentLoaded', function(){
	new App();
});

function Database() {
	this.items = [];
	this.dataMap = {};
	this.myId = 'id';
	this.events = new EventEmitter();
}

Database.prototype = Object.create(App.prototype);

Database.prototype.dataAdd = function (item) {
	var id = this.dataGetItemId(item);
	if (this.dataMap[id]) {
		throw new Error('Item with ' + this.myId + ': ' + id + ' - already exists');
	}
	this.items.push(item);
	this.dataMap[id] = item;
	this.emit('data-add', item);
};

Database.prototype.dataRemove = function (item) {
	var id = this.dataGetItemId(item),
		idArr = this.dataFindIndexInArray(this.items, item);
	if (this.dataMap[id]) {
		this.emit('data-del', this.dataMap[id]);
		delete this.dataMap[id];
		this.items.splice(idArr, 1);
	} else {
		throw new Error('Item you trying to delete does not belong to this store');
	}
};

Database.prototype.dataGetItemId = function (item) {
	if (typeof item === 'object' && item[this.myId] !== undefined) {
		return item[this.myId];
	} else if (typeof item === 'string' || typeof item === 'number') {
		return item.toString();
	} else {
		throw new Error('Item must have "' + this.myId + '" attribute');
	}
};

Database.prototype.dataFindIndexInArray = function (items, item) {
	function helper(item) {
		return function (el, i, arr) {
			return el === item;
		}
	}
	return items.findIndex(helper(item));
};

Database.prototype.dataUpdate = function (item, name, val) {
	var id = this.dataGetItemId(item);
	if (!name || !val) throw new Error('Uppdate mast have name or/and value of property');
	this.dataMap[id][name] = val;
	this.emit('data-update', this.dataMap[id]);
};

Database.prototype.dataFindProps = function (prop) {
	if (typeof prop !== 'string') return;
	var result = [];
	function helper (value) {
		result.push(value);
		return result;
	}
	this.helperSearchInArray(this.items, prop, helper);
	return result;
};

Database.prototype.helperSearchInArray = function (obj, key, callback) {
	for (var i in obj) {
		if (i == key) {
			callback(obj[i]);
		} else if (typeof obj[i] == "object" && Object.keys(obj[i]).length > 0) {
			this.helperSearchInArray(obj[i], key, callback);
		}
	}
};

Database.prototype.emit = function (event, parameters) {
	this.events.emit(event, parameters);
};

Database.prototype.on = function (event, listener) {
	this.events.on(event, listener);
};

function Countries(el) {
	if (!el) return;
	this.el = el;
	this.elToAdd = this.el.querySelector('#countries-list');
	this.elForAdd = this.el.querySelector('#country-input');
	this.events = new EventEmitter ();
	this.init();
}

Countries.prototype = {
	init: function () {
		this.el.addEventListener('click', this.delegationClick.bind(this));
		this.el.addEventListener('keyup', this.delegationKeyup.bind(this));
	},

	delegationClick: function (e) {
		var target = e.target;

		if (target.tagName === 'LI') {
			this.enterCountry(target);
			this.emit('country-enter', target);
		}
	},

	delegationKeyup: function (e) {
		var target = e.target;

		this.findInList(this.elForAdd.value);
		if (e.keyCode === 13) {
			var el = this.elToAdd.querySelector('.show-list');
			this.enterCountry(el);
		}
	},

	addCountry: function (text) {
		if (typeof text !== 'string' || text === '') return;
		this.elToAdd.insertAdjacentHTML('beforeend', '<li>' + text + '</li>');
	},

	clearAllList: function () {
		while (this.elToAdd.firstChild) {
			this.elToAdd.removeChild(this.elToAdd.firstChild);
		}
	},

	hideAll: function () {
		var els = this.elToAdd.children;
		for (var i = 0; i < els.length; i++) {
			els[i].classList.remove('show-list', 'selected');
			els[i].classList.add('hide');
		}
	},

	unSelected: function () {
		var els = this.elToAdd.children;
		for (var i = 0; i < els.length; i++) {
			els[i].classList.remove('selected');
		}
	},

	findInList: function (text) {
		var els = this.elToAdd.children;
		this.hideAll();
		for (var i = 0; i < els.length; i++) {
			if (els[i].innerHTML.toLowerCase().indexOf(text.toLowerCase()) !== -1) {
				els[i].classList.remove('hide');
				els[i].classList.add('show-list');
			}
		}
		var allShow = this.elToAdd.querySelectorAll('.show-list');
		this.emit('choose-countries', allShow);
	},

	chooseInList: function (arr) {
		this.hideAll();
		function helper(arr) {
			return function (el, i, array) {
				for (var i = 0; i < arr.length; i++) {
					if (el === arr[i].innerHTML) {
						arr[i].classList.remove('hide');
						arr[i].classList.add('show-list');
					}
				}
			}
		}
		var els = this.elToAdd.children;
		arr.forEach(helper(els));
	},

	enterCountry: function (el) {
		this.unSelected();
		el.classList.add('selected');
		this.emit('country-enter', el);
	},

	getByHtml: function (text) {
		var els = this.elToAdd.children;
		for (var i = 0; i < els.length; i++) {
			if (els[i].innerHTML.toLowerCase() === text.toLowerCase()) {
				return els[i];
			}
		}
	},

	emit: function (event, parameters) {
		this.events.emit(event, parameters);
	},

	on: function (event, listener) {
		this.events.on(event, listener);
	}
}

function Cities(el) {
	if (!el) return;
	this.el = el;
	this.elToAdd = this.el.querySelector('#cities-list');
	this.elForAdd = this.el.querySelector('#cities-input');
	this.events = new EventEmitter();
	this.init();
}


Cities.prototype = {
	init: function () {
		this.el.addEventListener('click', this.delegationClick.bind(this));
		this.el.addEventListener('keyup', this.delegationKeyup.bind(this));
	},

	delegationClick: function (e) {
		var target = e.target;

		if (target.tagName === 'LI') {
			this.emit('city-enter', target);
			this.enterCity(target);
		}
	},

	delegationKeyup: function (e) {
		var target = e.target;

		this.findInList(this.elForAdd.value);
		if (e.keyCode === 13) {
			var el = this.elToAdd.querySelector('.show-list');
			this.emit('city-enter', el);
			this.enterCity(el);
		}
	},

	addCity: function (text, id) {
		if ((typeof text !== 'string' || text === '') && (typeof id !== 'string' || id === '')) return;
		this.elToAdd.insertAdjacentHTML('beforeend', '<li show country-name="' + id + '">' + text + '</li>');
	},

	clearAllList: function () {
		while (this.elToAdd.firstChild) {
			this.elToAdd.removeChild(this.elToAdd.firstChild);
		}
	},

	hideAll: function () {
		var els = this.elToAdd.children;
		for (var i = 0; i < els.length; i++) {
			els[i].classList.add('hide');
			els[i].classList.remove('show-list', 'selected');
		}
	},

	findInList: function (text) {
		var els = this.getByAttribute('show');
		this.hideAll();
		for (var i = 0; i < els.length; i++) {
			if (els[i].innerHTML.toLowerCase().indexOf(text.toLowerCase()) !== -1) {
				els[i].classList.remove('hide');
				els[i].classList.add('show-list');
			}
		}
		var allShow = this.elToAdd.querySelectorAll('.show-list');
		// this.emit('choose-cities', allShow);
	},

	chooseInList: function (arr) {
		this.hideAll();
		function helper(arr) {
			return function (el, i, array) {
				for (var i = 0; i < arr.length; i++) {
					if (el === arr[i].getAttribute('country-name')) {
						arr[i].classList.remove('hide');
						arr[i].classList.add('show-list');
						arr[i].setAttribute('show', '');
					} else {
						arr[i].removeAttribute('show');
					}
				}
			}
		}
		var els = this.elToAdd.children;
		arr.forEach(helper(els));
		this.elForAdd.setAttribute('disabled', 'disabled')
	},

	getByAttribute: function (attrName) {
		var response = [];
		var els = this.elToAdd.children;
		for (var i = 0; i < els.length; i++) {
			if (els[i].hasAttribute(attrName)) {
				response.push(els[i]);
			}
		}
		return response;
	},

	enterCity: function (el) {
		this.unSelected();
		el.classList.add('selected');
	},

	unSelected: function () {
		var els = this.elToAdd.children;
		for (var i = 0; i < els.length; i++) {
			els[i].classList.remove('selected');
		}
	},

	startChooseCities: function (countryName) {
		this.elForAdd.value = '';
		this.chooseInList([countryName]);
		this.elForAdd.removeAttribute('disabled')
		this.elForAdd.focus();
	},

	emit: function (event, parameters) {
		this.events.emit(event, parameters);
	},

	on: function (event, listener) {
		this.events.on(event, listener);
	}
}

