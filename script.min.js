if (!Array.prototype.find) {
  Array.prototype.find = function(predicate) {
    if (this == null) {
      throw new TypeError('Array.prototype.find called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return value;
      }
    }
    return undefined;
  };
};
if (!Array.prototype.findIndex) {
  Array.prototype.findIndex = function(predicate) {
    if (this == null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return i;
      }
    }
    return -1;
  };
};
function Test(el) {
	this.el = el;
	this.events = new EventEmitter();
	this.init();
}

Test.prototype = {
	init: function () {
		this.el.addEventListener('click', this.delegation.bind(this));
	},

	delegation: function (e) {
		var target = e.target;
		if (target.classList.contains('add')) {
			this.emit('test', {id: 'test', funct: function () {console.log('ok')}})
		}
	},

	emit: function (event, parameters) {
		this.events.emit(event, parameters);
	}
}

function App() {
	this.data = {
		id: 'myid',
		name: 'name',
		fun: function(){
			console.log('i fun');
		}
	};
	this.database = new Database();
	this.events = new EventEmitter();
	// this.t = new Test(document.querySelector('.all'));
	this.init();
}

App.prototype.init = function () {
	new Test(document.querySelector('.all'));
	this.database.add(this.data);
	this.database.add({name: 'name', id: 'nameid'});
	this.on('data-myid', this.do.bind(this));
	this.on('test', this.dodo.bind(this));
};

App.prototype.do = function () {
	console.log(arguments);
};
App.prototype.dodo = function () {
	document.querySelector('get').innerHTML = 'ola';
};

App.prototype.on = function (event, listener) {
	this.events.on(event, listener);
};

window.addEventListener('DOMContentLoaded', function(){
	new App();
});
function EventEmitter() {
	this.events = {};
}

EventEmitter.prototype.on = function(event, listener) {
	if (typeof this.events[event] !== 'object') {
		this.events[event] = [];
	}
	this.events[event].push(listener);
}

EventEmitter.prototype.emit = function (event) {
	if (typeof this.events[event] !== 'object') return;
	var args = [].slice.call(arguments, 1)
	var listeners = this.events[event].slice(),
		length = listeners.length;
	for(var i = 0; i < length; i++) {
		listeners[i].apply(this, args)
	}
};

EventEmitter.prototype.get = function () {
	return this.events;
};

function Database() {
	this.items = [];
	this.dataMap = {};
	this.eventEmitter = new EventEmitter();
}

Database.prototype.add = function (item) {
	var id = this.getItemId(item);
	if (this.dataMap[id]) {
		throw new Error('Item with id: ' + id + ' - already exists');
	}
	this.items.push(item);
	this.dataMap[id] = item;

	this.emit('data-' + id, item);
};

Database.prototype.getItemId = function (item) {
	if (typeof item === 'object' && item['id'] !== undefined) {
		return item['id'];
	} else if (typeof item === 'string' || typeof item === 'number') {
		return item.toString();
	} else {
		throw new Error('Item must have "id" attribute');
	}
};

Database.prototype.delete = function (item) {
	var id = this.getItemId(item),
		idArr = this.findIndexInArray(this.items, item);
	if (this.dataMap[id]) {
		delete this.dataMap[id];
		this.items.splice(idArr, 1);
		this.emit('data-' + id, item);
	} else {
		throw new Error('Item you trying to delete does not belong to this store');
	}
};

Database.prototype.findIndexInArray = function (items, item) {
	function helper(item) {
		return function (el, i, arr) {
			return el === item;
		}
	}
	return items.findIndex(helper(item));
};

Database.prototype.findEl = function (id) {
	if (typeof id === 'string' || typeof id === 'number') {
		return this.dataMap[id];
	}
};

Database.prototype.on = function (event, listener) {
	this.eventEmitter.on(event, listener);
};

Database.prototype.emit = function (event, parameters) {
	this.eventEmitter.emit(event, parameters)
};
