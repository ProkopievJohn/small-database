if (!Array.prototype.find) {
  Array.prototype.find = function(predicate) {
    if (this == null) {
      throw new TypeError('Array.prototype.find called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return value;
      }
    }
    return undefined;
  };
};
if (!Array.prototype.findIndex) {
  Array.prototype.findIndex = function(predicate) {
    if (this == null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return i;
      }
    }
    return -1;
  };
};
function Test(el) {
	this.el = el;
	this.events = new EventEmitter();
	this.init();
}

Test.prototype = {
	init: function () {
		this.el.addEventListener('click', this.delegation.bind(this));
		// this.on('data', function(){console.log(arguments);})
	},

	delegation: function (e) {
		var target = e.target;
		if (target.classList.contains('add')) {
			this.emit('test-add', {id: 'test', funct: function () {console.log('ok')}, notest:'notest'})
		}
		if (target.classList.contains('del')) {
			this.emit('test-del', {id: 'test', funct: function () {console.log('ok')}, notest:'notest'})
		}
	},

	emit: function (event, parameters) {
		this.events.emit(event, parameters);
	},

	on: function (event, listener) {
		this.events.on(event, listener);
	}
}

function Tests(el) {
	this.el = el;
	this.events = new EventEmitter();
	this.init();
}

Tests.prototype = {
	init: function () {
		this.el.addEventListener('click', this.dalegation.bind(this));
	},

	dalegation: function (e) {
		var target = e.target;

		if (target.tagName === 'LI') {
			this.emit('delel', target.id);
		}
	},

	delEl: function (id) {
		var el = typeof id === 'string' ? this.el.querySelector('#' + id) : id;
		el.parentNode.removeChild(el);
	},

	addEl: function (id, text) {
		this.el.insertAdjacentHTML('beforeend', '<li id="' + id + '">' + text + '</li>');
	},

	emit: function (event, parameters) {
		this.events.emit(event, parameters);
	},

	on: function (event, listener) {
		this.events.on(event, listener);
	}
}
function App() {
	this.data = {
		id: 'id2',
		name: 'name2',
	};
	this.database = new Database();
	this.test = new Test(document.querySelector('.all'));
	this.tests = new Tests(document.querySelector('.get'));
	this.init();
}

App.prototype.init = function () {
	this.database.on('data', this.do.bind(this));
	this.test.on('test-add', this.database.add.bind(this.database));
	this.test.on('test-del', this.database.delete.bind(this.database));
	this.tests.on('delel', this.database.delete.bind(this.database));
	this.database.add(this.data);
	this.database.add({name: 'name1', id: 'id1'});
};
/***************************************/
App.prototype.do = function (data) {
	if (typeof data !== 'object') return;
	data.deladd ? this.tests.addEl(data.id, data.name) : this.tests.delEl(data.id);
};

window.addEventListener('DOMContentLoaded', function(){
	new App();
	database = new Database();
});

function EventEmitter() {
	this.events = {};
}

EventEmitter.prototype.on = function(event, listener) {
	if (typeof this.events[event] !== 'object') {
		this.events[event] = [];
	}
	this.events[event].push(listener);
};

EventEmitter.prototype.emit = function (event) {
	if (typeof this.events[event] !== 'object') return;
	var args = [].slice.call(arguments, 1)
	var listeners = this.events[event].slice(),
		length = listeners.length;
	for(var i = 0; i < length; i++) {
		listeners[i].apply(this, args)
	}
};

function Database() {
	this.items = [];
	this.dataMap = {};
	this.events = new EventEmitter();
}

Database.prototype.add = function (item) {
	var id = this.getItemId(item);
	if (this.dataMap[id]) {
		throw new Error('Item with id: ' + id + ' - already exists');
	}
	if (!item['name']) item['name'] = 'no name';
/*************************************************/
	item['deladd'] = true;
	this.items.push(item);
	this.dataMap[id] = item;
	this.emit('data', item);
};

Database.prototype.delete = function (item) {
	var id = this.getItemId(item),
		idArr = this.findIndexInArray(this.items, item);
	if (this.dataMap[id]) {
/**************************************************/
		this.dataMap[id]['deladd'] = false;
		this.emit('data', this.dataMap[id]);
		delete this.dataMap[id];
		this.items.splice(idArr, 1);
	} else {
		throw new Error('Item you trying to delete does not belong to this store');
	}
};

Database.prototype.getItemId = function (item) {
	if (typeof item === 'object' && item['id'] !== undefined) {
		return item['id'];
	} else if (typeof item === 'string' || typeof item === 'number') {
		return item.toString();
	} else {
		throw new Error('Item must have "id" attribute');
	}
};

Database.prototype.findIndexInArray = function (items, item) {
	function helper(item) {
		return function (el, i, arr) {
			return el === item;
		}
	}
	return items.findIndex(helper(item));
};

Database.prototype.on = function (event, listener) {
	this.events.on(event, listener);
};

Database.prototype.emit = function (event, parameters) {
	this.events.emit(event, parameters);
};
